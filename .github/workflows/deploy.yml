name: Deploy Frontend & Backend to cPanel Domain

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # FRONTEND (unchanged)
      - name: Setup Node for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: 'npm'
          cache-dependency-path: nexoraspace-frontend/package-lock.json

      - name: Install Frontend Dependencies
        working-directory: nexoraspace-frontend
        run: npm ci

      - name: Build Frontend
        working-directory: nexoraspace-frontend
        run: npm run build

      - name: Install rsync & sshpass
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass

      - name: Deploy Frontend via rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.htaccess' \
            --exclude='.env' \
            -e "sshpass -p '${{ secrets.CPANEL_PASSWORD }}' ssh -o StrictHostKeyChecking=no" \
            ./nexoraspace-frontend/dist/ ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:/home/sewturbhe/nexoraspace.vishalsharmadev.in/

      # BACKEND: copy + install + start/restart
      - name: Setup Node for Backend (Actions runner)
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Deploy Backend Files via rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.env' \
            --exclude='node_modules/' \
            -e "sshpass -p '${{ secrets.CPANEL_PASSWORD }}' ssh -o StrictHostKeyChecking=no" \
            ./backend/ ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:/home/sewturbhe/api.nexoraspace.vishalsharmadev.in/

      - name: Remote install & start backend (detect Passenger or PM2)
        env:
          REMOTE_USER: ${{ secrets.CPANEL_USERNAME }}
          REMOTE_HOST: ${{ secrets.CPANEL_HOST }}
          REMOTE_DIR: /home/sewturbhe/api.nexoraspace.vishalsharmadev.in
        run: |
          echo "Running remote setup: npm ci, build (if any), and restart (Passenger or PM2)"
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} bash -l -c "
            set -e
            cd ${REMOTE_DIR} || { echo 'Remote path not found: ${REMOTE_DIR}'; exit 2; }

            # Ensure correct NODE_ENV
            export NODE_ENV=production

            # Install production deps (fast)
            if [ -f package-lock.json ] || [ -f package.json ]; then
              echo 'Installing production dependencies...'
              npm ci --only=production || { echo 'npm ci failed'; exit 3; }
            else
              echo 'No package.json found; skipping npm install.'
            fi

            # Run backend build if present
            if npm run | grep -q ' build'; then
              echo 'Running npm run build...'
              npm run build || { echo 'Build failed'; exit 4; }
            else
              echo 'No build script found; skipping build.'
            fi

            # PREFERRED: If Passenger (cPanel Node App Manager) is used, touching tmp/restart.txt triggers restart
            if command -v passenger-config >/dev/null 2>&1 || command -v passenger >/dev/null 2>&1 || [ -d tmp ] || [ -f .htaccess ]; then
              echo 'Attempting Passenger restart (touch tmp/restart.txt)...'
              mkdir -p tmp
              touch tmp/restart.txt
              echo 'Passenger restart trigger created.'
            fi

            # FALLBACK / ALTERNATIVE: Use pm2 if available or install it and use it to start/restart your app
            # Using package.json start script as entrypoint; name the process 'nexora-api' (change if you prefer)
            APP_NAME='nexora-api'
            if command -v pm2 >/dev/null 2>&1; then
              echo 'pm2 found. Starting/restarting app via pm2...'
              # If not already managed, start it, else reload/restart
              if pm2 describe \"${APP_NAME}\" >/dev/null 2>&1; then
                pm2 reload \"${APP_NAME}\" || pm2 restart \"${APP_NAME}\"
              else
                # Start using `npm start` so the same script runs as locally
                pm2 start npm --name \"${APP_NAME}\" -- start
              fi
              pm2 save
              echo 'pm2 restart completed.'
            else
              # Try to install pm2 globally (if user has permission); otherwise skip
              echo 'pm2 not found; attempting to install pm2 globally (may require permission)...'
              if npm install -g pm2 --silent; then
                pm2 start npm --name \"${APP_NAME}\" -- start
                pm2 save
                echo 'pm2 installed and app started.'
              else
                echo 'Could not install pm2. If Passenger is not used, you must set up a Node process manager (pm2) or cPanel Application Manager to run the app.'
              fi
            fi

            echo 'Remote deploy steps finished.'
          "

      - name: Confirm Deployment
        run: echo "âœ… Deployment steps finished (frontend + backend)."
