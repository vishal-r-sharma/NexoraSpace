name: Deploy Frontend & Backend to cPanel Domain

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REMOTE_USER: ${{ secrets.CPANEL_USERNAME }}
      REMOTE_HOST: ${{ secrets.CPANEL_HOST }}
      REMOTE_FRONTEND_DIR: /home/sewturbhe/nexoraspace.vishalsharmadev.in
      REMOTE_BACKEND_DIR: /home/sewturbhe/api.nexoraspace.vishalsharmadev.in

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- FRONTEND ----------
      - name: Setup Node.js (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: 'npm'
          cache-dependency-path: nexoraspace-frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: nexoraspace-frontend
        run: npm ci

      - name: Build frontend (Vite)
        working-directory: nexoraspace-frontend
        run: npm run build

      - name: Install rsync & sshpass
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass

      - name: Deploy frontend via rsync
        run: |
          echo "Deploying frontend to ${REMOTE_HOST}:${REMOTE_FRONTEND_DIR}"
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.env' \
            --exclude='node_modules/' \
            -e "sshpass -p '${{ secrets.CPANEL_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./nexoraspace-frontend/dist/ ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:${{ env.REMOTE_FRONTEND_DIR }}/

      # ---------- BACKEND (install locally then upload) ----------
      - name: Setup Node.js (backend) on runner
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend production dependencies locally (runner)
        working-directory: backend
        run: |
          echo "Installing backend production dependencies locally..."
          npm ci --only=production

      - name: (Optional) Run backend build locally if present
        working-directory: backend
        run: |
          if npm run | grep -q " build"; then
            echo "Running backend build locally..."
            npm run build
          else
            echo "No backend build script detected; skipping local build."
          fi

      - name: Deploy backend (including node_modules) via rsync
        run: |
          echo "Deploying backend (including node_modules) to ${REMOTE_HOST}:${REMOTE_BACKEND_DIR}"
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.env' \
            -e "sshpass -p '${{ secrets.CPANEL_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./backend/ ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:${{ env.REMOTE_BACKEND_DIR }}/

      # ---------- REMOTE: touch Passenger restart or pm2 reload/start ----------
      - name: Remote post-deploy: build (if any) and restart app (Passenger or PM2)
        env:
          REMOTE_DIR: ${{ env.REMOTE_BACKEND_DIR }}
        run: |
          echo "Running remote post-deploy steps on ${REMOTE_HOST}..."

          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} bash -l <<'SSH_EOF'
            set -euo pipefail

            REMOTE_DIR="${REMOTE_DIR:-/home/sewturbhe/api.nexoraspace.vishalsharmadev.in}"
            echo "Remote dir: $REMOTE_DIR"

            if [ ! -d "$REMOTE_DIR" ]; then
              echo "Remote directory does not exist: $REMOTE_DIR"
              exit 2
            fi

            cd "$REMOTE_DIR"

            # Ensure production env for build/start
            export NODE_ENV=production

            # If you uploaded built files (e.g., dist) and have a build step, optionally run it on remote.
            # This is a noop if no 'build' script exists.
            if command -v npm >/dev/null 2>&1 && npm run | grep -q " build"; then
              echo "Running remote 'npm run build'..."
              npm run build || echo "Remote build failed (non-fatal if you built locally)."
            else
              echo "No remote build step or npm not available on remote; skipping remote build."
            fi

            # Passenger (cPanel Application Manager) restart trigger
            if [ -d tmp ] || [ -f passenger_wsgi.py ] || [ -f .htaccess ] || command -v passenger-config >/dev/null 2>&1 || command -v passenger >/dev/null 2>&1; then
              echo "Triggering Passenger restart (touch tmp/restart.txt)..."
              mkdir -p tmp
              touch tmp/restart.txt
              echo "Passenger restart triggered."
            else
              echo "Passenger not obviously present; skipping Passenger restart trigger."
            fi

            # PM2 restart fallback: attempt to reload or start via pm2 using 'npm start' entry
            APP_NAME="nexora-api"
            if command -v pm2 >/dev/null 2>&1; then
              echo "pm2 found. Restarting/reloading app via pm2..."
              if pm2 describe "$APP_NAME" >/dev/null 2>&1; then
                pm2 reload "$APP_NAME" || pm2 restart "$APP_NAME"
              else
                pm2 start npm --name "$APP_NAME" -- start
              fi
              pm2 save || true
              echo "pm2 restart completed."
            else
              echo "pm2 not found. Attempting to install pm2 globally (may fail on shared hosting)..."
              if command -v npm >/dev/null 2>&1 && npm install -g pm2 --silent; then
                pm2 start npm --name "$APP_NAME" -- start
                pm2 save || true
                echo "pm2 installed and app started."
              else
                echo "pm2 installation not possible or npm not available on remote. If the app isn't running after deploy, configure the Node app in cPanel Application Manager or install pm2 manually."
              fi
            fi

            echo "Remote post-deploy steps finished." SSH_EOF

      - name: Confirm deployment finished
        run: echo "âœ… Deployment finished: frontend -> ${REMOTE_FRONTEND_DIR} and backend -> ${REMOTE_BACKEND_DIR}"
